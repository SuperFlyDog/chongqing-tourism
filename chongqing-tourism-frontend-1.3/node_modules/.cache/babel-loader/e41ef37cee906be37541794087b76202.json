{"remainingRequest":"C:\\Users\\1\\OneDrive\\Desktop\\毕业论文\\chongqing-tourism-frontend-1.3\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\1\\OneDrive\\Desktop\\毕业论文\\chongqing-tourism-frontend-1.3\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\1\\OneDrive\\Desktop\\毕业论文\\chongqing-tourism-frontend-1.3\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\1\\OneDrive\\Desktop\\毕业论文\\chongqing-tourism-frontend-1.3\\src\\components\\Search.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\1\\OneDrive\\Desktop\\毕业论文\\chongqing-tourism-frontend-1.3\\src\\components\\Search.vue","mtime":1709635653955},{"path":"C:\\Users\\1\\OneDrive\\Desktop\\毕业论文\\chongqing-tourism-frontend-1.3\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709363805293},{"path":"C:\\Users\\1\\OneDrive\\Desktop\\毕业论文\\chongqing-tourism-frontend-1.3\\node_modules\\babel-loader\\lib\\index.js","mtime":1709363804013},{"path":"C:\\Users\\1\\OneDrive\\Desktop\\毕业论文\\chongqing-tourism-frontend-1.3\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709363805293},{"path":"C:\\Users\\1\\OneDrive\\Desktop\\毕业论文\\chongqing-tourism-frontend-1.3\\node_modules\\vue-loader\\lib\\index.js","mtime":1709363801915}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.search\";\nimport \"core-js/modules/es6.array.map\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport AMapLoader from \"@amap/amap-jsapi-loader\";\nimport axios from \"axios\";\nexport default {\n  props: {\n    optimizedPath: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      map: null,\n      infoWindow: null,\n      itineraryPoints: [],\n      drivingList: [],\n      // 存储多个 AMap.Driving 对象\n      errorMessage: \"\"\n    };\n  },\n  mounted: function mounted() {\n    this.initMap();\n  },\n  watch: {\n    optimizedPath: {\n      handler: 'handleOptimizedPathChange',\n      immediate: true // 立即执行一次\n\n    }\n  },\n  methods: {\n    handleOptimizedPathChange: function handleOptimizedPathChange(newPath) {\n      var _this = this;\n\n      console.log('optimizedPath 发生变化（Search.vue）:', newPath);\n      console.log(\"行程点数组:\", this.itineraryPoints);\n      AMapLoader.load({\n        key: \"bf9bd5e96adf1daae12a86c0430fc0a9\",\n        version: \"2.0\",\n        plugins: [\"AMap.Driving\"]\n      }).then(function (AMap) {\n        // 清除之前的路线\n        _this.clearPreviousRoutes();\n\n        _this.clearMarkers();\n\n        console.log(\"新路径长度:\", newPath.length); // 使用 AMap.Driving 服务规划路线\n\n        var _loop = function _loop(i) {\n          var startIdx = newPath[i];\n          var endIdx = newPath[i + 1]; // console.log(\"行程点数组:\", this.itineraryPoints);\n          // 从经纬度对象中获取经纬度值\n\n          var startLngLat = [_this.itineraryPoints[startIdx].position.lng, _this.itineraryPoints[startIdx].position.lat];\n          var endLngLat = [_this.itineraryPoints[endIdx].position.lng, _this.itineraryPoints[endIdx].position.lat];\n          var driving = new AMap.Driving({\n            map: _this.map,\n            autoFitView: false\n          }); // 将 driving 对象存储在数组中\n\n          _this.drivingList.push(driving); // 执行路径规划\n\n\n          driving.search(startLngLat, endLngLat, function (status, result) {\n            if (status === \"complete\" && result.routes && result.routes.length) {\n              console.log(\"\\u7ED8\\u5236\\u9A7E\\u8F66\\u8DEF\\u7EBF\\u5B8C\\u6210 (\".concat(startIdx, \" to \").concat(endIdx, \")\"));\n            } else {\n              console.error(\"\\u83B7\\u53D6\\u9A7E\\u8F66\\u6570\\u636E\\u5931\\u8D25 (\".concat(startIdx, \" to \").concat(endIdx, \"):\"), result);\n            }\n          });\n        };\n\n        for (var i = 0; i < newPath.length - 1; i++) {\n          _loop(i);\n        }\n      });\n    },\n    initMap: function initMap() {\n      var _this2 = this;\n\n      AMapLoader.load({\n        key: \"bf9bd5e96adf1daae12a86c0430fc0a9\",\n        version: \"2.0\",\n        plugins: [\"AMap.PlaceSearch\", \"AMap.AutoComplete\", \"AMap.Scale\", \"AMap.ControlBar\", \"AMap.MapType\", \"AMap.Driving\"]\n      }).then(function (AMap) {\n        _this2.map = new AMap.Map(\"container\", {\n          resizeEnable: true,\n          zoom: 10,\n          center: [106.551643, 29.562849]\n        });\n\n        _this2.map.addControl(new AMap.Scale());\n\n        _this2.map.addControl(new AMap.ControlBar({\n          position: {\n            top: \"10px\",\n            left: \"10px\"\n          }\n        }));\n\n        _this2.map.addControl(new AMap.MapType({\n          position: {\n            bottom: \"108px\",\n            right: \"10px\"\n          }\n        }));\n\n        var autoOptions = {\n          input: \"tipinput\",\n          city: \"023\"\n        };\n        var auto = new AMap.AutoComplete(autoOptions);\n        var placeSearch = new AMap.PlaceSearch({\n          map: _this2.map\n        });\n        auto.on(\"select\", function (e) {\n          _this2.map.setFitView();\n\n          placeSearch.setCity(e.poi.adcode);\n          placeSearch.search(e.poi.name);\n        }); // 创建信息窗体\n\n        _this2.infoWindow = new AMap.InfoWindow({\n          isCustom: true,\n          offset: new AMap.Pixel(0, -30)\n        }); // 监听地图点击事件\n\n        placeSearch.on(\"markerClick\", function (event) {\n          var marker = event.marker;\n\n          _this2.openInfoWindow(event);\n        });\n      });\n    },\n    clearPreviousRoutes: function clearPreviousRoutes() {\n      // 清除之前的路线\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.drivingList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var driving = _step.value;\n          driving.clear();\n        } // 重置数组\n\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.drivingList = [];\n    },\n    openInfoWindow: function openInfoWindow(event) {\n      var _this3 = this;\n\n      var marker = event.marker;\n      var position = marker.getPosition();\n      var marker_name = event.data.name;\n      var marker_address = event.data.address; // 使用原生 HTML+CSS 创建 InfoWindow 内容\n\n      var info = [];\n      info.push(\"<div class='info-window-content'>\");\n      info.push(\"<p><strong>\\u540D\\u79F0\\uFF1A</strong>\".concat(marker_name, \"</p>\"));\n      info.push(\"<p><strong>\\u5730\\u5740\\uFF1A</strong>\".concat(marker_address, \"</p>\"));\n      info.push(\"<button onclick='sendMessage(\".concat(position.lng, \", \").concat(position.lat, \")'>\\u6DFB\\u52A0\\u81F3\\u884C\\u7A0B</button>\"));\n      info.push(\"</div>\");\n      this.infoWindow = new AMap.InfoWindow({\n        content: info.join(\"\") // 使用默认信息窗体框样式，显示信息内容\n\n      }); // 将 sendMessage 方法绑定到 window 对象中\n\n      window.sendMessage = function (lng, lat) {\n        _this3.addToItinerary({\n          position: {\n            lng: lng,\n            lat: lat\n          },\n          name: marker_name,\n          address: marker_address\n        });\n      };\n\n      this.infoWindow.open(this.map, position);\n    },\n    addToItinerary: function addToItinerary(data) {\n      // 添加到itineraryPoints\n      this.itineraryPoints.push(data);\n      console.log(\"行程点数组:\", this.itineraryPoints); // 关闭信息窗体\n\n      this.infoWindow.close();\n      this.$emit(\"itinerary-updated\", this.itineraryPoints);\n    },\n    clearMarkers: function clearMarkers() {\n      // 清除地图上的Marker\n      this.map.clearMap();\n    }\n  }\n};",{"version":3,"sources":["Search.vue"],"names":[],"mappings":"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","sourcesContent":["//Search.vue\r\n\r\n<template>\r\n\t<div id=\"container\">\r\n\t\t<div class=\"error-message\" v-if=\"errorMessage\">\r\n\t\t\t{{errorMessage}}\r\n\t\t</div>\r\n\t\t<div id=\"myPageTop\">\r\n\t\t\t<table>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<label style=\"font-size: 14px;\">请输入要搜索的地点：</label>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<input id=\"tipinput\" />\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t</table>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script>\r\n\timport AMapLoader from \"@amap/amap-jsapi-loader\";\r\n\timport axios from \"axios\";\r\n\texport default {\r\n\t\tprops: {\r\n\t\t\toptimizedPath: {\r\n\t\t\t\ttype: Array,\r\n\t\t\t\tdefault: () => [],\r\n\t\t\t},\r\n\t\t},\r\n\t\tdata() {\r\n\t\t\treturn {\r\n\t\t\t\tmap: null,\r\n\t\t\t\tinfoWindow: null,\r\n\t\t\t\titineraryPoints: [],\r\n\t\t\t\tdrivingList: [], // 存储多个 AMap.Driving 对象\r\n\t\t\t\terrorMessage:\"\",\r\n\r\n\t\t\t};\r\n\t\t},\r\n\t\tmounted() {\r\n\t\t\tthis.initMap();\r\n\t\t},\r\n\t\twatch: {\r\n\t\t\toptimizedPath: {\r\n\t\t\t\thandler: 'handleOptimizedPathChange',\r\n\t\t\t\timmediate: true, // 立即执行一次\r\n\t\t\t},\r\n\t\t},\r\n\t\tmethods: {\r\n\t\t\thandleOptimizedPathChange(newPath) {\r\n\t\t\t\tconsole.log('optimizedPath 发生变化（Search.vue）:', newPath);\r\n\t\t\t\tconsole.log(\"行程点数组:\", this.itineraryPoints);\r\n\t\t\t\tAMapLoader.load({\r\n\t\t\t\t\tkey: \"bf9bd5e96adf1daae12a86c0430fc0a9\",\r\n\t\t\t\t\tversion: \"2.0\",\r\n\t\t\t\t\tplugins: [\r\n\t\t\t\t\t\t\"AMap.Driving\"\r\n\t\t\t\t\t],\r\n\t\t\t\t}).then((AMap) => {\r\n\t\t\t\t\t// 清除之前的路线\r\n\t\t\t\t\tthis.clearPreviousRoutes();\r\n\t\t\t\t\tthis.clearMarkers();\r\n\t\t\t\t\tconsole.log(\"新路径长度:\", newPath.length);\r\n\t\t\t\t\t// 使用 AMap.Driving 服务规划路线\r\n\t\t\t\t\tfor (let i = 0; i < newPath.length - 1; i++) {\r\n\t\t\t\t\t\tconst startIdx = newPath[i];\r\n\t\t\t\t\t\tconst endIdx = newPath[i + 1];\r\n\t\t\t\t\t\t// console.log(\"行程点数组:\", this.itineraryPoints);\r\n\t\t\t\t\t\t// 从经纬度对象中获取经纬度值\r\n\t\t\t\t\t\tconst startLngLat = [\r\n\t\t\t\t\t\t\tthis.itineraryPoints[startIdx].position.lng,\r\n\t\t\t\t\t\t\tthis.itineraryPoints[startIdx].position.lat,\r\n\t\t\t\t\t\t];\r\n\t\t\t\t\t\tconst endLngLat = [\r\n\t\t\t\t\t\t\tthis.itineraryPoints[endIdx].position.lng,\r\n\t\t\t\t\t\t\tthis.itineraryPoints[endIdx].position.lat,\r\n\t\t\t\t\t\t];\r\n\r\n\t\t\t\t\t\tconst driving = new AMap.Driving({\r\n\t\t\t\t\t\t\tmap: this.map,\r\n\t\t\t\t\t\t\tautoFitView: false,\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t// 将 driving 对象存储在数组中\r\n\t\t\t\t\t\tthis.drivingList.push(driving);\r\n\r\n\t\t\t\t\t\t// 执行路径规划\r\n\t\t\t\t\t\tdriving.search(startLngLat, endLngLat, (status, result) => {\r\n\t\t\t\t\t\t\tif (status === \"complete\" && result.routes && result.routes.length) {\r\n\t\t\t\t\t\t\t\tconsole.log(`绘制驾车路线完成 (${startIdx} to ${endIdx})`);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tconsole.error(\r\n\t\t\t\t\t\t\t\t\t`获取驾车数据失败 (${startIdx} to ${endIdx}):`,\r\n\t\t\t\t\t\t\t\t\tresult\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t},\r\n\r\n\t\t\tinitMap() {\r\n\t\t\t\tAMapLoader.load({\r\n\t\t\t\t\tkey: \"bf9bd5e96adf1daae12a86c0430fc0a9\",\r\n\t\t\t\t\tversion: \"2.0\",\r\n\t\t\t\t\tplugins: [\r\n\t\t\t\t\t\t\"AMap.PlaceSearch\",\r\n\t\t\t\t\t\t\"AMap.AutoComplete\",\r\n\t\t\t\t\t\t\"AMap.Scale\",\r\n\t\t\t\t\t\t\"AMap.ControlBar\",\r\n\t\t\t\t\t\t\"AMap.MapType\",\r\n\t\t\t\t\t\t\"AMap.Driving\"\r\n\r\n\t\t\t\t\t],\r\n\t\t\t\t}).then((AMap) => {\r\n\t\t\t\t\tthis.map = new AMap.Map(\"container\", {\r\n\t\t\t\t\t\tresizeEnable: true,\r\n\t\t\t\t\t\tzoom: 10,\r\n\t\t\t\t\t\tcenter: [106.551643, 29.562849],\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tthis.map.addControl(new AMap.Scale());\r\n\t\t\t\t\tthis.map.addControl(\r\n\t\t\t\t\t\tnew AMap.ControlBar({\r\n\t\t\t\t\t\t\tposition: {\r\n\t\t\t\t\t\t\t\ttop: \"10px\",\r\n\t\t\t\t\t\t\t\tleft: \"10px\",\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t);\r\n\t\t\t\t\tthis.map.addControl(\r\n\t\t\t\t\t\tnew AMap.MapType({\r\n\t\t\t\t\t\t\tposition: {\r\n\t\t\t\t\t\t\t\tbottom: \"108px\",\r\n\t\t\t\t\t\t\t\tright: \"10px\",\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tvar autoOptions = {\r\n\t\t\t\t\t\tinput: \"tipinput\",\r\n\t\t\t\t\t\tcity: \"023\",\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar auto = new AMap.AutoComplete(autoOptions);\r\n\t\t\t\t\tvar placeSearch = new AMap.PlaceSearch({\r\n\t\t\t\t\t\tmap: this.map,\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tauto.on(\"select\", (e) => {\r\n\t\t\t\t\t\tthis.map.setFitView();\r\n\t\t\t\t\t\tplaceSearch.setCity(e.poi.adcode);\r\n\t\t\t\t\t\tplaceSearch.search(e.poi.name);\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// 创建信息窗体\r\n\t\t\t\t\tthis.infoWindow = new AMap.InfoWindow({\r\n\t\t\t\t\t\tisCustom: true,\r\n\t\t\t\t\t\toffset: new AMap.Pixel(0, -30),\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// 监听地图点击事件\r\n\t\t\t\t\tplaceSearch.on(\"markerClick\", (event) => {\r\n\t\t\t\t\t\tconst marker = event.marker;\r\n\t\t\t\t\t\tthis.openInfoWindow(event);\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\tclearPreviousRoutes() {\r\n\t\t\t\t// 清除之前的路线\r\n\t\t\t\tfor (const driving of this.drivingList) {\r\n\t\t\t\t\tdriving.clear();\r\n\t\t\t\t}\r\n\t\t\t\t// 重置数组\r\n\t\t\t\tthis.drivingList = [];\r\n\t\t\t},\r\n\t\t\topenInfoWindow(event) {\r\n\t\t\t\tconst marker = event.marker;\r\n\t\t\t\tconst position = marker.getPosition();\r\n\t\t\t\tconst marker_name = event.data.name;\r\n\t\t\t\tconst marker_address = event.data.address;\r\n\r\n\t\t\t\t// 使用原生 HTML+CSS 创建 InfoWindow 内容\r\n\t\t\t\tlet info = [];\r\n\t\t\t\tinfo.push(\"<div class='info-window-content'>\");\r\n\t\t\t\tinfo.push(`<p><strong>名称：</strong>${marker_name}</p>`);\r\n\t\t\t\tinfo.push(`<p><strong>地址：</strong>${marker_address}</p>`);\r\n\t\t\t\tinfo.push(`<button onclick='sendMessage(${position.lng}, ${position.lat})'>添加至行程</button>`);\r\n\t\t\t\tinfo.push(\"</div>\");\r\n\r\n\t\t\t\tthis.infoWindow = new AMap.InfoWindow({\r\n\t\t\t\t\tcontent: info.join(\"\"), // 使用默认信息窗体框样式，显示信息内容\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// 将 sendMessage 方法绑定到 window 对象中\r\n\t\t\t\twindow.sendMessage = (lng, lat) => {\r\n\t\t\t\t\tthis.addToItinerary({\r\n\t\t\t\t\t\tposition: {\r\n\t\t\t\t\t\t\tlng: lng,\r\n\t\t\t\t\t\t\tlat: lat,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tname: marker_name,\r\n\t\t\t\t\t\taddress: marker_address,\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\r\n\t\t\t\tthis.infoWindow.open(this.map, position);\r\n\t\t\t},\r\n\t\t\taddToItinerary(data) {\r\n\t\t\t\t// 添加到itineraryPoints\r\n\t\t\t\tthis.itineraryPoints.push(data);\r\n\t\t\t\tconsole.log(\"行程点数组:\", this.itineraryPoints);\r\n\r\n\t\t\t\t// 关闭信息窗体\r\n\t\t\t\tthis.infoWindow.close();\r\n\t\t\t\tthis.$emit(\"itinerary-updated\", this.itineraryPoints);\r\n\t\t\t},\r\n\t\t\tclearMarkers() {\r\n\t\t\t\t// 清除地图上的Marker\r\n\t\t\t\tthis.map.clearMap();\r\n\t\t\t},\r\n\r\n\t\t},\r\n\t};\r\n</script>\r\n\r\n<style>\r\n\t#container {\r\n\t\tposition: relative;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\nz-index: 1;\r\n\t}\r\n\r\n\t#myPageTop {\r\n\r\n\t\tposition: absolute;\r\n\t\ttop: 10px;\r\n\t\tright: 10px;\r\n\t\tbackground-color: white;\r\n\t\tborder-radius: 5px;\r\n\t\tbox-shadow: rgba(0, 0, 0, 0.24) 0px 3px 5px;\r\n\t\tz-index: 2;\r\n\r\n\t}\r\n\r\n\t/* 添加一个样式用于 infoWindow 的内容 */\r\n\t.info-window-content {\r\n\t\tpadding: 10px;\r\n\t}\r\n\t.error-message {\r\n\t\tposition: fixed;\r\n\t\ttop: 20px;\r\n\t\tleft: 50%;\r\n\t\ttransform: translateX(-50%);\r\n\t\tbackground-color: #ffcccc;\r\n\t\tcolor: #ff0000;\r\n\t\tpadding: 10px 20px;\r\n\t\tborder-radius: 5px;\r\n\t\tborder: 1px solid #ff0000;\r\n\t\tz-index: 3;\r\n\t}\r\n</style>"],"sourceRoot":"src/components"}]}
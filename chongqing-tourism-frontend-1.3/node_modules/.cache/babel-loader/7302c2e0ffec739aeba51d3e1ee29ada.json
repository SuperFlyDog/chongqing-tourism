{"remainingRequest":"C:\\Users\\1\\OneDrive\\Desktop\\毕业论文\\chongqing-tourism-frontend-1.3\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\1\\OneDrive\\Desktop\\毕业论文\\chongqing-tourism-frontend-1.3\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\1\\OneDrive\\Desktop\\毕业论文\\chongqing-tourism-frontend-1.3\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\1\\OneDrive\\Desktop\\毕业论文\\chongqing-tourism-frontend-1.3\\src\\components\\Itinerary.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\1\\OneDrive\\Desktop\\毕业论文\\chongqing-tourism-frontend-1.3\\src\\components\\Itinerary.vue","mtime":1709632392864},{"path":"C:\\Users\\1\\OneDrive\\Desktop\\毕业论文\\chongqing-tourism-frontend-1.3\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709363805293},{"path":"C:\\Users\\1\\OneDrive\\Desktop\\毕业论文\\chongqing-tourism-frontend-1.3\\node_modules\\babel-loader\\lib\\index.js","mtime":1709363804013},{"path":"C:\\Users\\1\\OneDrive\\Desktop\\毕业论文\\chongqing-tourism-frontend-1.3\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709363805293},{"path":"C:\\Users\\1\\OneDrive\\Desktop\\毕业论文\\chongqing-tourism-frontend-1.3\\node_modules\\vue-loader\\lib\\index.js","mtime":1709363801915}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.search\";\nimport \"core-js/modules/es6.array.fill\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\1\\\\OneDrive\\\\Desktop\\\\\\u6BD5\\u4E1A\\u8BBA\\u6587\\\\chongqing-tourism-frontend-1.3\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.array.map\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport AMapLoader from \"@amap/amap-jsapi-loader\";\nimport axios from \"axios\"; // Import axios\n\nexport default {\n  props: {\n    itineraryPoints: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      distanceMatrix: [],\n      // 存储距离矩阵\n      optimizedPath: [],\n      entrancePoint: null,\n      exitPoint: null,\n      errorMessage: \"\",\n      whatIsGoingOn: \"\"\n    };\n  },\n  methods: {\n    updateEntrancePoint: function updateEntrancePoint() {\n      this.$emit(\"entrance-updated\", this.itineraryPoints[this.entrancePoint]);\n    },\n    updateExitPoint: function updateExitPoint() {\n      this.$emit(\"exit-updated\", this.itineraryPoints[this.exitPoint]);\n    },\n    updateOptimizedPath: function updateOptimizedPath() {\n      this.$emit(\"optimizedPath-updated\", this.optimizedPath);\n    },\n    generatePath: function generatePath() {\n      var _this = this;\n\n      if (this.itineraryPoints.length < 2) {\n        this.errorMessage = \"请将至少两个地点添加至行程\";\n        setTimeout(function () {\n          _this.errorMessage = \"\"; // 2 秒后清空错误消息\n        }, 2000);\n        console.log(this.errorMessage);\n        return;\n      } else if (this.itineraryPoints.length >= 2 && this.entrancePoint == null) {\n        this.errorMessage = \"请选择起点\";\n        setTimeout(function () {\n          _this.errorMessage = \"\"; // 2 秒后清空错误消息\n        }, 2000);\n        console.log(this.errorMessage);\n        return;\n      } else if (this.itineraryPoints.length >= 2 && this.exitPoint == null) {\n        console.log('entrancePoint:', this.entrancePoint);\n        console.log('exitPoint:', this.exitPoint);\n        this.errorMessage = \"请选择终点\";\n        setTimeout(function () {\n          _this.errorMessage = \"\"; // 2 秒后清空错误消息\n        }, 2000);\n        console.log(this.errorMessage);\n        return;\n      } else if (this.itineraryPoints.length >= 2 && this.entrancePoint && this.exitPoint == null) {\n        this.errorMessage = \"请选择起点和终点\";\n        setTimeout(function () {\n          _this.errorMessage = \"\"; // 2 秒后清空错误消息\n        }, 2000);\n        console.log(this.errorMessage);\n        return;\n      } // 在生成路径按钮点击时获取距离矩阵\n\n\n      this.calculateRoutes(this.itineraryPoints).then(function () {\n        _this.whatIsGoingOn = \"正在计算路线\";\n\n        var cityCoords = _this.itineraryPoints.map(function (point) {\n          return [point.position.lat, point.position.lng];\n        });\n\n        var entranceCoords = _this.itineraryPoints[_this.entrancePoint].position;\n        var exitCoords = _this.itineraryPoints[_this.exitPoint].position;\n        var dataToSend = {\n          city_coords: _this.itineraryPoints.map(function (point) {\n            return [point.position.lat, point.position.lng];\n          }),\n          distances: _this.distanceMatrix,\n          entrance_index: _this.entrancePoint,\n          exit_index: _this.exitPoint\n        };\n        console.log('向后端发送数据:', dataToSend); // 发送 dataToSend 到后端\n\n        axios.post('http://localhost:5000/optimize', dataToSend).then(function (response) {\n          // 处理成功的响应\n          console.log('后端返回的数据:', response.data);\n          _this.optimizedPath = response.data.optimized_path;\n          _this.whatIsGoingOn = \"\";\n\n          _this.updateOptimizedPath();\n        }).catch(function (error) {\n          // 处理错误\n          console.error('发生错误:向后端传输数据失败', error);\n          _this.whatIsGoingOn = \"\";\n          _this.errorMessage = '发生错误：向后端传输数据失败，请尝试刷新页面后重试。';\n        });\n      });\n    },\n    calculateRoutes: function () {\n      var _calculateRoutes = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(points) {\n        var i, j, start, end, distance;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return AMapLoader.load({\n                  key: 'bf9bd5e96adf1daae12a86c0430fc0a9',\n                  // 替换为你的高德地图API Key\n                  version: '2.0',\n                  plugins: ['AMap.Driving']\n                });\n\n              case 2:\n                this.distanceMatrix = Array.from({\n                  length: points.length\n                }, function () {\n                  return Array(points.length).fill(0);\n                });\n                this.whatIsGoingOn = \"正在获取地理数据\";\n                i = 0;\n\n              case 5:\n                if (!(i < points.length)) {\n                  _context.next = 21;\n                  break;\n                }\n\n                j = i + 1;\n\n              case 7:\n                if (!(j < points.length)) {\n                  _context.next = 18;\n                  break;\n                }\n\n                start = [points[i].position.lng, points[i].position.lat];\n                end = [points[j].position.lng, points[j].position.lat];\n                _context.next = 12;\n                return this.calculateRouteBetweenPoints(start, end);\n\n              case 12:\n                distance = _context.sent;\n                this.distanceMatrix[i][j] = distance;\n                this.distanceMatrix[j][i] = distance;\n\n              case 15:\n                j++;\n                _context.next = 7;\n                break;\n\n              case 18:\n                i++;\n                _context.next = 5;\n                break;\n\n              case 21:\n                this.whatIsGoingOn = \"\";\n                console.log('距离矩阵:', this.distanceMatrix);\n\n              case 23:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function calculateRoutes(_x) {\n        return _calculateRoutes.apply(this, arguments);\n      }\n\n      return calculateRoutes;\n    }(),\n    calculateRouteBetweenPoints: function calculateRouteBetweenPoints(start, end) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        // 使用异步加载\n        AMapLoader.load({\n          key: 'bf9bd5e96adf1daae12a86c0430fc0a9',\n          // 替换为你的高德地图API Key\n          version: '2.0',\n          plugins: ['AMap.Driving']\n        }).then(function (AMap) {\n          var driving = new AMap.Driving({\n            policy: AMap.DrivingPolicy.LEAST_TIME\n          });\n          driving.search(start, end, function (status, result) {\n            if (status === 'complete') {\n              var distance = result.routes[0].distance;\n              resolve(distance);\n            } else {\n              console.error('发生错误：获取地理数据失败失败:', result);\n              _this2.whatIsGoingOn = \"\";\n              _this2.errorMessage = '发生错误：获取地理数据失败，请尝试刷新页面后重试。';\n            }\n          });\n        });\n      });\n    },\n    removePoint: function removePoint(index) {\n      console.log('尝试删除itineraryPoints:', index);\n      console.log('itineraryPoints:', this.itineraryPoints);\n      this.itineraryPoints.splice(index, 1);\n    }\n  }\n};",{"version":3,"sources":["Itinerary.vue"],"names":[],"mappings":"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","sourcesContent":["//Itinerary\r\n\r\n<template>\r\n\r\n\t<div>\r\n\t\t<div>\r\n\t\t\t<label>选择进入地点：</label>\r\n\t\t\t<select v-model=\"entrancePoint\" @change=\"updateEntrancePoint\">\r\n\t\t\t\t<option v-for=\"(point, index) in itineraryPoints\" :key=\"index\" :value=\"index\">\r\n\t\t\t\t\t{{ point.name }}\r\n\t\t\t\t</option>\r\n\t\t\t</select>\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<label>选择离开地点：</label>\r\n\t\t\t<select v-model=\"exitPoint\" @change=\"updateExitPoint\">\r\n\t\t\t\t<option v-for=\"(point, index) in itineraryPoints\" :key=\"index\" :value=\"index\">\r\n\t\t\t\t\t{{ point.name }}\r\n\t\t\t\t</option>\r\n\t\t\t</select>\r\n\t\t</div>\r\n\t\t<h2>旅行清单</h2>\r\n\t\t<ul style=\"margin-left: -20px;\">\r\n\t\t\t<li v-for=\"(point, index) in itineraryPoints\" :key=\"index\">\r\n\t\t\t\t<div class=\"itinerary-item\">\r\n\t\t\t\t\t<span class=\"itinerary-text\" :title=\"point.name + ' - ' + point.address\">{{ point.name }}</span>\r\n\t\t\t\t\t<button @click=\"removePoint(index)\">删除</button>\r\n\t\t\t\t</div>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t\t<button @click=\"generatePath\">生成路径</button>\r\n\t\t<div class=\"error-message\" v-if=\"errorMessage\">\r\n\t\t\t{{errorMessage}}\r\n\t\t</div>\r\n\t\t<div class=\"what-is-going-on\" v-if=\"whatIsGoingOn\">\r\n\t\t\t{{whatIsGoingOn}}\r\n\t\t</div>\r\n\t\t<div v-if=\"optimizedPath.length > 0\">\r\n\t\t\t<h2>最佳路径</h2>\r\n\t\t\t<ul>\r\n\t\t\t\t<li v-for=\"(index, i) in optimizedPath\" :key=\"i\">\r\n\t\t\t\t\t{{ i + 1 }}. {{ itineraryPoints[index].name }}\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\r\n\t</div>\r\n\r\n</template>\r\n\r\n<script>\r\n\timport AMapLoader from \"@amap/amap-jsapi-loader\";\r\n\timport axios from \"axios\"; // Import axios\r\n\r\n\texport default {\r\n\t\tprops: {\r\n\t\t\titineraryPoints: {\r\n\t\t\t\ttype: Array,\r\n\t\t\t\tdefault: () => [],\r\n\t\t\t},\r\n\t\t},\r\n\t\tdata() {\r\n\t\t\treturn {\r\n\t\t\t\tdistanceMatrix: [], // 存储距离矩阵\r\n\t\t\t\toptimizedPath: [],\r\n\t\t\t\tentrancePoint: null,\r\n\t\t\t\texitPoint: null,\r\n\t\t\t\terrorMessage:\"\",\r\n\t\t\t\twhatIsGoingOn:\"\",\r\n\t\t\t};\r\n\t\t},\r\n\t\tmethods: {\r\n\t\t\tupdateEntrancePoint() {\r\n\t\t\t\tthis.$emit(\"entrance-updated\", this.itineraryPoints[this.entrancePoint]);\r\n\t\t\t},\r\n\t\t\tupdateExitPoint() {\r\n\t\t\t\tthis.$emit(\"exit-updated\", this.itineraryPoints[this.exitPoint]);\r\n\t\t\t},\r\n\t\t\tupdateOptimizedPath() {\r\n\r\n\t\t\t\tthis.$emit(\"optimizedPath-updated\", this.optimizedPath);\r\n\t\t\t},\r\n\r\n\t\t\tgeneratePath() {\r\n\t\t\t\t\r\n\t\t\t\tif (this.itineraryPoints.length < 2) {\r\n\t\t\t\t\tthis.errorMessage=\"请将至少两个地点添加至行程\";\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t      this.errorMessage = \"\"; // 2 秒后清空错误消息\r\n\t\t\t\t\t    }, 2000);\r\n\t\t\t\t\tconsole.log(this.errorMessage);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}else if(this.itineraryPoints.length >= 2&&this.entrancePoint==null){\r\n\t\t\t\t\tthis.errorMessage=\"请选择起点\";\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t      this.errorMessage = \"\"; // 2 秒后清空错误消息\r\n\t\t\t\t\t    }, 2000);\r\n\t\t\t\t\tconsole.log(this.errorMessage);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}else if(this.itineraryPoints.length >= 2&&this.exitPoint==null){\r\n\t\t\t\t\tconsole.log('entrancePoint:',this.entrancePoint);\r\n\t\t\t\t\tconsole.log('exitPoint:',this.exitPoint);\r\n\t\t\t\t\tthis.errorMessage=\"请选择终点\";\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t      this.errorMessage = \"\"; // 2 秒后清空错误消息\r\n\t\t\t\t\t    }, 2000);\r\n\t\t\t\t\tconsole.log(this.errorMessage);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}else if(this.itineraryPoints.length >= 2&&this.entrancePoint&&this.exitPoint==null){\r\n\t\t\t\t\tthis.errorMessage=\"请选择起点和终点\";\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t      this.errorMessage = \"\"; // 2 秒后清空错误消息\r\n\t\t\t\t\t    }, 2000);\r\n\t\t\t\t\tconsole.log(this.errorMessage);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t// 在生成路径按钮点击时获取距离矩阵\r\n\t\t\t\t\r\n\t\t\t\tthis.calculateRoutes(this.itineraryPoints).then(() => {\r\n\t\t\t\t\tthis.whatIsGoingOn=\"正在计算路线\";\r\n\t\t\t\t\tconst cityCoords = this.itineraryPoints.map(point => [point.position.lat, point.position.lng]);\r\n\t\t\t\t\tconst entranceCoords = this.itineraryPoints[this.entrancePoint].position;\r\n\t\t\t\t\tconst exitCoords = this.itineraryPoints[this.exitPoint].position;\r\n\t\t\t\t\tconst dataToSend = {\r\n\t\t\t\t\t\tcity_coords: this.itineraryPoints.map(point => [point.position.lat, point.position\r\n\t\t\t\t\t\t\t.lng\r\n\t\t\t\t\t\t]),\r\n\t\t\t\t\t\tdistances: this.distanceMatrix,\r\n\t\t\t\t\t\tentrance_index: this.entrancePoint,\r\n\t\t\t\t\t\texit_index: this.exitPoint,\r\n\t\t\t\t\t};\r\n\t\t\t\t\tconsole.log('向后端发送数据:', dataToSend);\r\n\t\t\t\t\t// 发送 dataToSend 到后端\r\n\t\t\t\t\taxios.post('http://localhost:5000/optimize', dataToSend)\r\n\t\t\t\t\t\t.then(response => {\r\n\t\t\t\t\t\t\t// 处理成功的响应\r\n\t\t\t\t\t\t\tconsole.log('后端返回的数据:', response.data);\r\n\t\t\t\t\t\t\tthis.optimizedPath = response.data.optimized_path;\r\n\t\t\t\t\t\t\tthis.whatIsGoingOn=\"\";\r\n\t\t\t\t\t\t\tthis.updateOptimizedPath();\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\t\t// 处理错误\r\n\t\t\t\t\t\t\tconsole.error('发生错误:向后端传输数据失败', error);\r\n\t\t\t\t\t\t\tthis.whatIsGoingOn=\"\";\r\n\t\t\t\t\t\t\tthis.errorMessage = '发生错误：向后端传输数据失败，请尝试刷新页面后重试。';\r\n\t\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t},\r\n\t\t\tasync calculateRoutes(points) {\r\n\t\t\t\t// 使用异步加载\r\n\t\t\t\tawait AMapLoader.load({\r\n\t\t\t\t\tkey: 'bf9bd5e96adf1daae12a86c0430fc0a9', // 替换为你的高德地图API Key\r\n\t\t\t\t\tversion: '2.0',\r\n\t\t\t\t\tplugins: ['AMap.Driving'],\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis.distanceMatrix = Array.from({\r\n\t\t\t\t\tlength: points.length\r\n\t\t\t\t}, () => Array(points.length).fill(0));\r\n\t\t\t\tthis.whatIsGoingOn=\"正在获取地理数据\";\r\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\r\n\t\t\t\t\tfor (let j = i + 1; j < points.length; j++) {\r\n\t\t\t\t\t\tconst start = [points[i].position.lng, points[i].position.lat];\r\n\t\t\t\t\t\tconst end = [points[j].position.lng, points[j].position.lat];\r\n\t\t\t\t\t\tconst distance = await this.calculateRouteBetweenPoints(start, end);\r\n\r\n\t\t\t\t\t\tthis.distanceMatrix[i][j] = distance;\r\n\t\t\t\t\t\tthis.distanceMatrix[j][i] = distance;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.whatIsGoingOn=\"\";\r\n\t\t\t\tconsole.log('距离矩阵:', this.distanceMatrix);\r\n\t\t\t\t\t\r\n\t\t\t},\r\n\t\t\tcalculateRouteBetweenPoints(start, end) {\r\n\t\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\t\t// 使用异步加载\r\n\t\t\t\t\tAMapLoader.load({\r\n\t\t\t\t\t\tkey: 'bf9bd5e96adf1daae12a86c0430fc0a9', // 替换为你的高德地图API Key\r\n\t\t\t\t\t\tversion: '2.0',\r\n\t\t\t\t\t\tplugins: ['AMap.Driving'],\r\n\t\t\t\t\t}).then((AMap) => {\r\n\t\t\t\t\t\tconst driving = new AMap.Driving({\r\n\t\t\t\t\t\t\tpolicy: AMap.DrivingPolicy.LEAST_TIME,\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tdriving.search(start, end, (status, result) => {\r\n\t\t\t\t\t\t\tif (status === 'complete') {\r\n\t\t\t\t\t\t\t\tconst distance = result.routes[0].distance;\r\n\t\t\t\t\t\t\t\tresolve(distance);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tconsole.error('发生错误：获取地理数据失败失败:', result);\r\n\t\t\t\t\t\t\t\tthis.whatIsGoingOn=\"\";\r\n\t\t\t\t\t\t\t\tthis.errorMessage = '发生错误：获取地理数据失败，请尝试刷新页面后重试。';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\tremovePoint(index) {\r\n\t\t\t\tconsole.log('尝试删除itineraryPoints:', index);\r\n\t\t\t\tconsole.log('itineraryPoints:', this.itineraryPoints);\r\n\t\t\t\tthis.itineraryPoints.splice(index, 1);\r\n\t\t\t},\r\n\t\t},\r\n\t};\r\n</script>\r\n\r\n<style scoped>\r\n\t.itinerary-item {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-between;\r\n\t\talign-items: center;\r\n\t\tmargin-left: ;\r\n\t}\r\n\r\n\t.itinerary-text {\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t\tmax-width: 300px;\r\n\t\tcursor: pointer;\r\n\t}\r\n\r\n\t.itinerary-text:hover {\r\n\t\tz-index: 1;\r\n\t\tbackground-color: #fff;\r\n\t}\r\n\r\n\t.error-message {\r\n\t\tposition: fixed;\r\n\t\ttop: 20px;\r\n\t\tleft: 50%;\r\n\t\ttransform: translateX(-50%);\r\n\t\tbackground-color: #ffcccc;\r\n\t\tcolor: #ff0000;\r\n\t\tpadding: 10px 20px;\r\n\t\tborder-radius: 5px;\r\n\t\tborder: 1px solid #ff0000;\r\n\t\tz-index: 3;\r\n\t}\r\n\t.what-is-going-on {\r\n\t\tposition: fixed;\r\n\t\ttop: 20px;\r\n\t\tleft: 50%;\r\n\t\ttransform: translateX(-50%);\r\n\t\tbackground-color: #d9ffdc;\r\n\t\tcolor: #00aa7f;\r\n\t\tpadding: 10px 20px;\r\n\t\tborder-radius: 5px;\r\n\t\tborder: 1px solid #00aa7f;\r\n\t\tz-index: 3;\r\n\t}\r\n</style>"],"sourceRoot":"src/components"}]}
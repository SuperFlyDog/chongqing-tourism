{"remainingRequest":"C:\\Users\\1\\OneDrive\\Desktop\\毕业论文\\chongqing-tourism-frontend-1.3\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\1\\OneDrive\\Desktop\\毕业论文\\chongqing-tourism-frontend-1.3\\src\\components\\Itinerary.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\1\\OneDrive\\Desktop\\毕业论文\\chongqing-tourism-frontend-1.3\\src\\components\\Itinerary.vue","mtime":1709625048803},{"path":"C:\\Users\\1\\OneDrive\\Desktop\\毕业论文\\chongqing-tourism-frontend-1.3\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709363805293},{"path":"C:\\Users\\1\\OneDrive\\Desktop\\毕业论文\\chongqing-tourism-frontend-1.3\\node_modules\\babel-loader\\lib\\index.js","mtime":1709363804013},{"path":"C:\\Users\\1\\OneDrive\\Desktop\\毕业论文\\chongqing-tourism-frontend-1.3\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709363805293},{"path":"C:\\Users\\1\\OneDrive\\Desktop\\毕业论文\\chongqing-tourism-frontend-1.3\\node_modules\\vue-loader\\lib\\index.js","mtime":1709363801915}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n\timport AMapLoader from \"@amap/amap-jsapi-loader\";\r\n\timport axios from \"axios\"; // Import axios\r\n\r\n\texport default {\r\n\t\tprops: {\r\n\t\t\titineraryPoints: {\r\n\t\t\t\ttype: Array,\r\n\t\t\t\tdefault: () => [],\r\n\t\t\t},\r\n\t\t},\r\n\t\tdata() {\r\n\t\t\treturn {\r\n\t\t\t\tdistanceMatrix: [], // 存储距离矩阵\r\n\t\t\t\toptimizedPath: [],\r\n\t\t\t\tentrancePoint: null,\r\n\t\t\t\texitPoint: null,\r\n\t\t\t\terrorMessage1: '',\r\n\t\t\t\terrorMessage2: '',\r\n\t\t\t};\r\n\t\t},\r\n\t\tmethods: {\r\n\t\t\tupdateEntrancePoint() {\r\n\t\t\t\tthis.$emit(\"entrance-updated\", this.itineraryPoints[this.entrancePoint]);\r\n\t\t\t},\r\n\t\t\tupdateExitPoint() {\r\n\t\t\t\tthis.$emit(\"exit-updated\", this.itineraryPoints[this.exitPoint]);\r\n\t\t\t},\r\n\t\t\tupdateOptimizedPath() {\r\n\r\n\t\t\t\tthis.$emit(\"optimizedPath-updated\", this.optimizedPath);\r\n\t\t\t},\r\n\r\n\t\t\tgeneratePath() {\r\n\t\t\t\t// 在生成路径按钮点击时获取距离矩阵\r\n\t\t\t\tthis.calculateRoutes(this.itineraryPoints).then(() => {\r\n\t\t\t\t\tconst cityCoords = this.itineraryPoints.map(point => [point.position.lat, point.position.lng]);\r\n\t\t\t\t\tconst entranceCoords = this.itineraryPoints[this.entrancePoint].position;\r\n\t\t\t\t\tconst exitCoords = this.itineraryPoints[this.exitPoint].position;\r\n\t\t\t\t\tconst dataToSend = {\r\n\t\t\t\t\t\tcity_coords: this.itineraryPoints.map(point => [point.position.lat, point.position\r\n\t\t\t\t\t\t\t.lng]),\r\n\t\t\t\t\t\tdistances: this.distanceMatrix,\r\n\t\t\t\t\t\tentrance_index: this.entrancePoint,\r\n\t\t\t\t\t\texit_index: this.exitPoint,\r\n\t\t\t\t\t};\r\n\t\t\t\t\tconsole.log('向后端发送数据:', dataToSend);\r\n\t\t\t\t\t// 发送 dataToSend 到后端\r\n\t\t\t\t\taxios.post('http://localhost:5000/optimize', dataToSend)\r\n\t\t\t\t\t\t.then(response => {\r\n\t\t\t\t\t\t\t// 处理成功的响应\r\n\t\t\t\t\t\t\tconsole.log('后端返回的数据:', response.data);\r\n\t\t\t\t\t\t\tthis.optimizedPath = response.data.optimized_path;\r\n\r\n\t\t\t\t\t\t\tthis.updateOptimizedPath();\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\t\t// 处理错误\r\n\t\t\t\t\t\t\tconsole.error('发生错误:向后端传输数据失败', error);\r\n\t\t\t\t\t\t\tthis.errorMessage1 = '发生错误（向后端传输数据失败），请稍后重试。';\r\n\t\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\tasync calculateRoutes(points) {\r\n\t\t\t\t// 使用异步加载\r\n\t\t\t\tawait AMapLoader.load({\r\n\t\t\t\t\tkey: '177f68d7bc584a174470beca1681ae92', // 替换为你的高德地图API Key\r\n\t\t\t\t\tversion: '2.0',\r\n\t\t\t\t\tplugins: ['AMap.Driving'],\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis.distanceMatrix = Array.from({\r\n\t\t\t\t\tlength: points.length\r\n\t\t\t\t}, () => Array(points.length).fill(0));\r\n\r\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\r\n\t\t\t\t\tfor (let j = i + 1; j < points.length; j++) {\r\n\t\t\t\t\t\tconst start = [points[i].position.lng, points[i].position.lat];\r\n\t\t\t\t\t\tconst end = [points[j].position.lng, points[j].position.lat];\r\n\t\t\t\t\t\tconst distance = await this.calculateRouteBetweenPoints(start, end);\r\n\r\n\t\t\t\t\t\tthis.distanceMatrix[i][j] = distance;\r\n\t\t\t\t\t\tthis.distanceMatrix[j][i] = distance;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconsole.log('距离矩阵:', this.distanceMatrix);\r\n\r\n\t\t\t},\r\n\t\t\tcalculateRouteBetweenPoints(start, end) {\r\n\t\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\t\t// 使用异步加载\r\n\t\t\t\t\tAMapLoader.load({\r\n\t\t\t\t\t\tkey: '177f68d7bc584a174470beca1681ae92', // 替换为你的高德地图API Key\r\n\t\t\t\t\t\tversion: '2.0',\r\n\t\t\t\t\t\tplugins: ['AMap.Driving'],\r\n\t\t\t\t\t}).then((AMap) => {\r\n\t\t\t\t\t\tconst driving = new AMap.Driving({\r\n\t\t\t\t\t\t\tpolicy: AMap.DrivingPolicy.LEAST_TIME,\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tdriving.search(start, end, (status, result) => {\r\n\t\t\t\t\t\t\tif (status === 'complete') {\r\n\t\t\t\t\t\t\t\tconst distance = result.routes[0].distance;\r\n\t\t\t\t\t\t\t\tresolve(distance);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tconsole.error('发生错误：获取地点间距离失败:', result);\r\n\t\t\t\t\t\t\t\tthis.errorMessage2 = '发生错误（获取地点间距离失败），请稍后重试。';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\tremovePoint(index) {\r\n\t\t\t\tconsole.log('尝试删除itineraryPoints:',index);\r\n\t\t\t\tconsole.log('itineraryPoints:',this.itineraryPoints);\r\n\t\t\t\tthis.itineraryPoints.splice(index, 1);\r\n\t\t\t},\r\n\t\t},\r\n\t};\r\n",{"version":3,"sources":["Itinerary.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"Itinerary.vue","sourceRoot":"src/components","sourcesContent":["//Itinerary\r\n\r\n<template>\r\n\t\r\n\t<div>\r\n\t\t<el-button>默认按钮</el-button>\r\n\t\t<div>\r\n\t\t\t<label>选择进入地点：</label>\r\n\t\t\t<select v-model=\"entrancePoint\" @change=\"updateEntrancePoint\">\r\n\t\t\t\t<option v-for=\"(point, index) in itineraryPoints\" :key=\"index\" :value=\"index\">\r\n\t\t\t\t\t{{ point.name }}\r\n\t\t\t\t</option>\r\n\t\t\t</select>\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<label>选择离开地点：</label>\r\n\t\t\t<select v-model=\"exitPoint\" @change=\"updateExitPoint\">\r\n\t\t\t\t<option v-for=\"(point, index) in itineraryPoints\" :key=\"index\" :value=\"index\">\r\n\t\t\t\t\t{{ point.name }}\r\n\t\t\t\t</option>\r\n\t\t\t</select>\r\n\t\t</div>\r\n\t\t<h2>旅行清单</h2>\r\n\t\t<ul style=\"margin-left: -20px;\">\r\n\t\t\t<li v-for=\"(point, index) in itineraryPoints\" :key=\"index\">\r\n\t\t\t\t<div class=\"itinerary-item\">\r\n\t\t\t\t\t<span class=\"itinerary-text\" :title=\"point.name + ' - ' + point.address\">{{ point.name }}</span>\r\n\t\t\t\t\t<button @click=\"removePoint(index)\">删除</button>\r\n\t\t\t\t</div>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t\t<button @click=\"generatePath\">生成路径</button>\r\n\t\t<div v-if=\"optimizedPath.length > 0\">\r\n\t\t\t<h2>最佳路径</h2>\r\n\t\t\t<ul>\r\n\t\t\t\t<li v-for=\"(index, i) in optimizedPath\" :key=\"i\">\r\n\t\t\t\t\t{{ i + 1 }}. {{ itineraryPoints[index].name }}\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t\t<div v-if=\"errorMessage1\" class=\"error-message\">\r\n\t\t\t{{ errorMessage1 }}\r\n\t\t</div>\r\n\t\t<div v-else-if=\"errorMessage2\" class=\"error-message\">\r\n\t\t\t{{ errorMessage2 }}\r\n\t\t</div>\r\n\t</div>\r\n\r\n</template>\r\n\r\n<script>\r\n\timport AMapLoader from \"@amap/amap-jsapi-loader\";\r\n\timport axios from \"axios\"; // Import axios\r\n\r\n\texport default {\r\n\t\tprops: {\r\n\t\t\titineraryPoints: {\r\n\t\t\t\ttype: Array,\r\n\t\t\t\tdefault: () => [],\r\n\t\t\t},\r\n\t\t},\r\n\t\tdata() {\r\n\t\t\treturn {\r\n\t\t\t\tdistanceMatrix: [], // 存储距离矩阵\r\n\t\t\t\toptimizedPath: [],\r\n\t\t\t\tentrancePoint: null,\r\n\t\t\t\texitPoint: null,\r\n\t\t\t\terrorMessage1: '',\r\n\t\t\t\terrorMessage2: '',\r\n\t\t\t};\r\n\t\t},\r\n\t\tmethods: {\r\n\t\t\tupdateEntrancePoint() {\r\n\t\t\t\tthis.$emit(\"entrance-updated\", this.itineraryPoints[this.entrancePoint]);\r\n\t\t\t},\r\n\t\t\tupdateExitPoint() {\r\n\t\t\t\tthis.$emit(\"exit-updated\", this.itineraryPoints[this.exitPoint]);\r\n\t\t\t},\r\n\t\t\tupdateOptimizedPath() {\r\n\r\n\t\t\t\tthis.$emit(\"optimizedPath-updated\", this.optimizedPath);\r\n\t\t\t},\r\n\r\n\t\t\tgeneratePath() {\r\n\t\t\t\t// 在生成路径按钮点击时获取距离矩阵\r\n\t\t\t\tthis.calculateRoutes(this.itineraryPoints).then(() => {\r\n\t\t\t\t\tconst cityCoords = this.itineraryPoints.map(point => [point.position.lat, point.position.lng]);\r\n\t\t\t\t\tconst entranceCoords = this.itineraryPoints[this.entrancePoint].position;\r\n\t\t\t\t\tconst exitCoords = this.itineraryPoints[this.exitPoint].position;\r\n\t\t\t\t\tconst dataToSend = {\r\n\t\t\t\t\t\tcity_coords: this.itineraryPoints.map(point => [point.position.lat, point.position\r\n\t\t\t\t\t\t\t.lng]),\r\n\t\t\t\t\t\tdistances: this.distanceMatrix,\r\n\t\t\t\t\t\tentrance_index: this.entrancePoint,\r\n\t\t\t\t\t\texit_index: this.exitPoint,\r\n\t\t\t\t\t};\r\n\t\t\t\t\tconsole.log('向后端发送数据:', dataToSend);\r\n\t\t\t\t\t// 发送 dataToSend 到后端\r\n\t\t\t\t\taxios.post('http://localhost:5000/optimize', dataToSend)\r\n\t\t\t\t\t\t.then(response => {\r\n\t\t\t\t\t\t\t// 处理成功的响应\r\n\t\t\t\t\t\t\tconsole.log('后端返回的数据:', response.data);\r\n\t\t\t\t\t\t\tthis.optimizedPath = response.data.optimized_path;\r\n\r\n\t\t\t\t\t\t\tthis.updateOptimizedPath();\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\t\t// 处理错误\r\n\t\t\t\t\t\t\tconsole.error('发生错误:向后端传输数据失败', error);\r\n\t\t\t\t\t\t\tthis.errorMessage1 = '发生错误（向后端传输数据失败），请稍后重试。';\r\n\t\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\tasync calculateRoutes(points) {\r\n\t\t\t\t// 使用异步加载\r\n\t\t\t\tawait AMapLoader.load({\r\n\t\t\t\t\tkey: '177f68d7bc584a174470beca1681ae92', // 替换为你的高德地图API Key\r\n\t\t\t\t\tversion: '2.0',\r\n\t\t\t\t\tplugins: ['AMap.Driving'],\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis.distanceMatrix = Array.from({\r\n\t\t\t\t\tlength: points.length\r\n\t\t\t\t}, () => Array(points.length).fill(0));\r\n\r\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\r\n\t\t\t\t\tfor (let j = i + 1; j < points.length; j++) {\r\n\t\t\t\t\t\tconst start = [points[i].position.lng, points[i].position.lat];\r\n\t\t\t\t\t\tconst end = [points[j].position.lng, points[j].position.lat];\r\n\t\t\t\t\t\tconst distance = await this.calculateRouteBetweenPoints(start, end);\r\n\r\n\t\t\t\t\t\tthis.distanceMatrix[i][j] = distance;\r\n\t\t\t\t\t\tthis.distanceMatrix[j][i] = distance;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconsole.log('距离矩阵:', this.distanceMatrix);\r\n\r\n\t\t\t},\r\n\t\t\tcalculateRouteBetweenPoints(start, end) {\r\n\t\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\t\t// 使用异步加载\r\n\t\t\t\t\tAMapLoader.load({\r\n\t\t\t\t\t\tkey: '177f68d7bc584a174470beca1681ae92', // 替换为你的高德地图API Key\r\n\t\t\t\t\t\tversion: '2.0',\r\n\t\t\t\t\t\tplugins: ['AMap.Driving'],\r\n\t\t\t\t\t}).then((AMap) => {\r\n\t\t\t\t\t\tconst driving = new AMap.Driving({\r\n\t\t\t\t\t\t\tpolicy: AMap.DrivingPolicy.LEAST_TIME,\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tdriving.search(start, end, (status, result) => {\r\n\t\t\t\t\t\t\tif (status === 'complete') {\r\n\t\t\t\t\t\t\t\tconst distance = result.routes[0].distance;\r\n\t\t\t\t\t\t\t\tresolve(distance);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tconsole.error('发生错误：获取地点间距离失败:', result);\r\n\t\t\t\t\t\t\t\tthis.errorMessage2 = '发生错误（获取地点间距离失败），请稍后重试。';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\tremovePoint(index) {\r\n\t\t\t\tconsole.log('尝试删除itineraryPoints:',index);\r\n\t\t\t\tconsole.log('itineraryPoints:',this.itineraryPoints);\r\n\t\t\t\tthis.itineraryPoints.splice(index, 1);\r\n\t\t\t},\r\n\t\t},\r\n\t};\r\n</script>\r\n\r\n<style scoped>\r\n\t.itinerary-item {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-between;\r\n\t\talign-items: center;\r\n\t\tmargin-left: ;\r\n\t}\r\n\r\n\t.itinerary-text {\r\n\t\twhite-space: nowrap;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t\tmax-width: 300px;\r\n\t\tcursor: pointer;\r\n\t}\r\n\r\n\t.itinerary-text:hover {\r\n\t\tz-index: 1;\r\n\t\tbackground-color: #fff;\r\n\t}\r\n\r\n\t.error-message {\r\n\t\tposition: fixed;\r\n\t\ttop: 20px;\r\n\t\tleft: 50%;\r\n\t\ttransform: translateX(-50%);\r\n\t\tbackground-color: #ffcccc;\r\n\t\tcolor: #ff0000;\r\n\t\tpadding: 10px 20px;\r\n\t\tborder-radius: 5px;\r\n\t\tborder: 1px solid #ff0000;\r\n\t}\r\n</style>"]}]}